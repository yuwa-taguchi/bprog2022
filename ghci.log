GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/yuwa/bprog2022/.ghci
2022-05-19 15:41:26.069557776
>>> 23 + 5
28
2022-05-19 15:54:17.066999297
>>> 3 + 2 * 5
13
2022-05-19 15:55:07.962281059
>>> (3 + 2) * 5
25
2022-05-19 15:55:43.346388864
>>> 5 - 4 - 8
-7
2022-05-19 15:56:01.844667229
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:46.781332025
>>> double 3

<interactive>:6:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:19.665297932
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/yuwa/bprog2022/.ghci
2022-05-26 15:02:17.77708079
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:37.596313254
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:09.661245993
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:42.713088493
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:07.071957405
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:07.146367034
>>> double 3
6
2022-05-26 15:56:21.73921268
>>> double 123
246
2022-05-26 15:57:03.241196508
>>> double (1 + 3)
8
2022-05-26 15:57:31.053923941
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/yuwa/bprog2022/.ghci
2022-06-09 14:55:21.078476439
>>> 2 + 3 * 4
14
2022-06-09 14:58:55.430765679
>>> (2 + 3) * 4
20
2022-06-09 15:00:21.082083576
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:00:47.734061236
>>> sqrt (3 ^ 2 + 4 ^ 2)
5.0
2022-06-09 15:05:17.069947036
>>> sqrt (25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:21.421137819
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:55.360319133
>>> sqrt 25
5.0
2022-06-09 15:10:28.585094946
>>> hoge 25 :: Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:14:04.063267209
>>> head[1, 2, 3]
1
2022-06-09 15:47:09.264464025
>>> head [3, 1, 4, 1, 5]
3
2022-06-09 15:47:46.196507249
>>> head []
*** Exception: Prelude.head: empty list
2022-06-09 15:49:00.06694909
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:50:56.300305873
>>> hoge
[3,1,4,1,5]
2022-06-09 15:51:13.742996291
>>> head hoge
3
2022-06-09 15:51:34.87755179
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:49.175443094
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:48.534644218
>>> hoge !! 0
3
2022-06-09 15:55:06.783697517
>>> hoge 2 !! hoge

<interactive>:18:1: error:
    • Couldn't match expected type: t0 -> [a]
                  with actual type: [Int]
    • The function ‘hoge’ is applied to one value argument,
        but its type ‘[Int]’ has none
      In the first argument of ‘(!!)’, namely ‘hoge 2’
      In the expression: hoge 2 !! hoge
    • Relevant bindings include it :: a (bound at <interactive>:18:1)

<interactive>:18:11: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Int]’
    • In the second argument of ‘(!!)’, namely ‘hoge’
      In the expression: hoge 2 !! hoge
      In an equation for ‘it’: it = hoge 2 !! hoge
2022-06-09 15:56:20.128969516
>>> hoge !! 2
4
2022-06-09 15:56:47.685806129
>>> take 3 hoge
[3,1,4]
2022-06-09 15:57:13.459313581
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:30.660260301
>>> hoge 5 hoge

<interactive>:22:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:22:1)
2022-06-09 15:58:34.396993742
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:59:06.87302043
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:25.019970163
>>> drop 10 hoge
[]
2022-06-09 15:59:59.578202852
>>> length hoge
5
2022-06-09 16:01:21.216910347
>>> sum hoge
14
2022-06-09 16:02:07.008161828
>>> product hoge
60
2022-06-09 16:03:08.859926333
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:05:05.820311104
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:50.103540668
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:07:57.171440797
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:07:57.216200611
>>> double 3 + 3
9
2022-06-09 16:08:40.278433788
>>> double (3 + 3)
12
2022-06-09 16:11:59.212191412
>>> puadruple 2

<interactive>:35:1: error:
    Variable not in scope: puadruple :: t0 -> t
2022-06-09 16:15:41.893424567
>>> git add .

<interactive>:36:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 16:17:26.574726395
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/yuwa/bprog2022/.ghci
2022-06-16 15:02:10.57143578
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/yuwa/bprog2022/.ghci
2022-06-16 15:03:47.679758031
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:31.760949121
>>> 
2022-06-16 15:06:31.01308038
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:50.238896355
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:50.277016476
>>> double

<interactive>:5:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:13:04.318414062
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:16.10461728
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:40.652410231
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product[1 .. n]
  11  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:21:03.020094922
>>> factorial 3
6
2022-06-16 15:22:10.311382323
>>> factorial 4
24
2022-06-16 15:22:31.644667841
>>> average [1,2,3,4,5]

<interactive>:11:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:39:57.344239572
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product[1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:16:24: error:
    • Couldn't match expected type ‘Int’
                  with actual type ‘t0 a0 -> Int’
    • Probable cause: ‘length’ is applied to too few arguments
      In the second argument of ‘div’, namely ‘(length)’
      In the expression: div (sum xs) (length)
      In an equation for ‘ave’: ave xs = div (sum xs) (length)
   |
16 | ave xs = div (sum xs) (length)
   |                        ^^^^^^
Failed, no modules loaded.
2022-06-16 15:40:22.101773211
>>> average [1,2,3,4,5]

<interactive>:13:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:40:49.784500914
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product[1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:41:32.499563746
>>> average [1,2,3,4,5]
3
2022-06-16 15:41:45.208029739
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:50:01.325863018
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:09.659477639
>>> myinit [1 .. 5]

<interactive>:18:1: error:
    • Variable not in scope: myinit :: [a0] -> t
    • Perhaps you meant ‘init’ (imported from Prelude)
2022-06-16 16:14:51.498543351
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product[1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:15:19.474186079
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:15:34.30890744
>>> :q
Leaving GHCi.
